*CmdlineSpecialEdits.txt*	Useful replacements of parts of the cmdline.

		   CMDLINE SPECIAL EDITS    by Ingo Karkat
						     *CmdlineSpecialEdits.vim*
description			|CmdlineSpecialEdits-description|
usage				|CmdlineSpecialEdits-usage|
installation			|CmdlineSpecialEdits-installation|
configuration			|CmdlineSpecialEdits-configuration|
integration			|CmdlineSpecialEdits-integration|
limitations			|CmdlineSpecialEdits-limitations|
known problems			|CmdlineSpecialEdits-known-problems|
todo				|CmdlineSpecialEdits-todo|
history				|CmdlineSpecialEdits-history|

==============================================================================
DESCRIPTION				     *CmdlineSpecialEdits-description*

This plugin ...

HOW IT WORKS								     *

SEE ALSO								     *

- CTRL-G ' inspired by
    http://superuser.com/questions/856533/vim-visual-mode-search-and-replace
- CTRL-BS based on http://vim.wikia.com/wiki/Command_line_file_name_completion

RELATED WORKS								     *

- The |c_CTRL-G_CTRL-U| mapping was inspired by
   http://stackoverflow.com/questions/11011304/reusing-the-previous-range-in-ex-commands-in-vim/11013406#11013406

==============================================================================
USAGE						   *CmdlineSpecialEdits-usage*
							     *c_CTRL-G_CTRL-U*
CTRL-G CTRL-U		Remove all characters between the cursor position and
			the closest previous |:range| given to a command. When
			directly after a range, remove it.
			Useful to repeat a recalled command line with the same
			range, but a different command.
			When used on an empty command line, recalls the
			previous command-line from history first.
							     *c_CTRL-G_CTRL-A*
CTRL-G CTRL-A		Remove all command arguments between the cursor
			position and the closest previous command.
			Useful to repeat a command with different arguments.
			When used on an empty command line, recalls the
			previous command-line from history first.
							     *c_CTRL-G_CTRL-C*
CTRL-G CTRL-C		Remove the closest previous command from the command
			line, but keep its arguments.
			Useful to re-use the same arguments with a different
			command.
			When used on an empty command line, recalls the
			previous command-line from history first.
CTRL-G '		Change symbolic ranges like '<,'> to the actual line
			numbers, and vice versa.
			Useful to be able to repeat a command on the same
			range, even when the selection changes.
			When used on an empty command line, recalls the
			previous command-line from history first.
							     *c_CTRL-G_CTRL-O*
CTRL-G CTRL-O		Recall older command-line from history, whose
			beginning matches the current command-line, regardless
			of the current |:range| and the one in the history.
			Subsequent invocations step backwards through the
			history, like |c_<Up>|. This allows you to re-apply
			previous visual mode commands (e.g. :'<,'>s/foo/bar)
			to a different range, or vice versa.
							     *c_CTRL-G_CTRL-S*
CTRL-G CTRL-S		Toggle between |:substitute| and |:SmartCase| variants.
			When entering a search pattern: Toggle pattern between
			normal and SmartCase matching.
			When used on an empty command line, recalls the
			previous command-line / search pattern from history
			first.
							     *c_CTRL-G_CTRL-S*
CTRL-G CTRL-H		Apply literal <BS> and <C-h> keys (e.g. when editing a
			macro inline via q"{reg}) by removing them and the
			previously pressed key.
								   *c_CTRL-BS*
CTRL-BS			Remove last path component / file extension.

						     *c_CTRL-G_I* *c_CTRL-G_A*
CTRL-G I		Group any existing regexp branches and position the
			cursor at the beginning (but behind a |/^| anchor).
CTRL-G A		Group any existing regexp branches and position the
			cursor at the end (but before a |/$| anchor).
			These are useful to prepend / append a common prefix /
			suffix to different pattern branches, e.g.:
			    bar\|baz -> \%(bar\|baz\) ~

CTRL-G s		Simplify regexp branches of the search pattern by
			extracting common substrings. For example:
			/myFoobar\|theFoony -> /\%(my\|the\)Foo\%(bar\|ny\) ~
								  *c_CTRL-G_y*
CTRL-G y		Yank the current command-line (to the default
			register).

			 *c_CTRL-R_CTRL-G* *c_CTRL-R_CTRL-L* *c_CTRL-R_CTRL-S*
CTRL-R CTRL-S		Insert the character under the cursor.
CTRL-R CTRL-L		Insert the current line (without leading indent and
			trailing spaces).
CTRL-R CTRL-G		Insert the current selected text.
							     *c_CTRL-R_CTRL-V*
CTRL-R CTRL-V{0-9a-z"%#*+:.-=}
			Insert the contents of a register for literal search.
			(Prepends |/\V| and escapes backslashes and the search
			delimiter.)
									  *:#*
:#			Alias for :'[,'] (like :* is a synonym for :'<,'>)


				      *CmdlineSpecialEdits-SpecialSearchModes*
*//* *??* */?* *?/* */_* *?_* */star* *?star* *///* *???* *//?* *??/* *//_* *??_*
//, ??			Perform a literal search. (Only after a search
			pattern, to keep the idiom of //e to repeat the search
			but jump to the end.)
/?, ?/			Perform a case-insensitive search. Both when
			initiating a search as well as inside a search
			command-line (where repeated use will toggle the
			special search mode).
/_, ?_			Perform a search that ignores whitespace differences
			and comment prefixes.
/*, ?*			Perform a search that ignores whitespace differences
			and comment prefixes, and also allowing direct
			concatenation of lines (i.e. without any whitespace in
			between).
///, ???		Use the last search pattern and toggle from literal to
			normal search and vice versa.
//?, ??/		Use the last search pattern and toggle from
			case-insensitive to normal search and vice versa.
//_, ??_		Use the last search pattern and toggle from
			whitespace-flexible to normal search and vice versa.

							     *ALT-/* *c_ALT-/*
<A-/>, c_ALT-/		Toggle search mode between normal, case-insensitive,
			and literal.
							     *ALT-?* *c_ALT-?*
<A-S-/>, c_ALT-SHIFT-/	Toggle search mode between whole word (\<...\>) and
			normal matching.
							     *ALT-(* *c_ALT-(*
<A-(>, c_ALT-(		(Un-)wrap search pattern in capturing group \(...\).

==============================================================================
INSTALLATION				    *CmdlineSpecialEdits-installation*

This script is packaged as a |vimball|. If you have the "gunzip" decompressor
in your PATH, simply edit the *.vmb.gz package in Vim; otherwise, decompress
the archive first, e.g. using WinZip. Inside Vim, install by sourcing the
vimball or via the |:UseVimball| command. >
    vim CmdlineSpecialEdits*.vmb.gz
    :so %
To uninstall, use the |:RmVimball| command.

DEPENDENCIES				    *CmdlineSpecialEdits-dependencies*

- Requires Vim 7.0 or higher.
- Requires the |ingo-library.vim| plugin (vimscript #4433), version 1.032 or
  higher.

==============================================================================
CONFIGURATION				   *CmdlineSpecialEdits-configuration*

For a permanent configuration, put the following commands into your |vimrc|:
			*g:CmdlineSpecialEdits_SymbolicRangeConsideredMarks*
The marks to be considered by the |c_CTRL-G_'| command are specified as a
String of mark names, with "#" representing the current line range :.; they
are checked from left to right. The default considers all marks except for
(){} (because those are very dependent on the current position). >
    let g:CmdlineSpecialEdits_SymbolicRangeConsideredMarks = 'abcde...'
<			    *g:CmdlineSpecialEdits_SymbolicRangeMaximumOffset*
The |c_CTRL-G_'| command also uses small offsets for nearby marks. The default
is +/-3 lines; change it via: >
    let g:CmdlineSpecialEdits_SymbolicRangeMaximumOffset = 0
<
			*g:CmdlineSpecialEdits_EnableSpecialSearchMode*
If you don't want the |CmdlineSpecialEdits-SpecialSearchModes| (e.g. //, /?,
/_), you can turn them off via >
    let g:CmdlineSpecialEdits_EnableSpecialSearchMode = 0
Remapping to other keys isn't possible here.

						   *CmdlineSpecialEdits-remap*
If you want to use different mappings, map your keys to the
<Plug>(CmdlineSpecialEdits...) mapping targets _before_ sourcing the script
(e.g. in your |vimrc|): >
    cmap <C-g><C-u> <Plug>(CmdlineSpecialRemoveAllButRange)
    cmap <C-g><C-a> <Plug>(CmdlineSpecialRemoveCommandArguments)
    cmap <C-g><C-c> <Plug>(CmdlineSpecialRemoveCommandName)
    cmap <C-g><C-o> <Plug>(CmdlineSpecialRecallAnyRange)
    cmap <C-g><C-s> <Plug>(CmdlineSpecialToggleSmartCase)
    cmap <C-g>' <Plug>(CmdlineSpecialToggleSymbolicRange)
    cmap <C-g><C-h> <Plug>(CmdlineSpecialRemoveBackspacing)
    cmap <C-BS> <Plug>(CmdlineSpecialRemoveLastPathComponent)
    cmap <C-g>I <Plug>(CmdlineSpecialAddPrefix)
    cmap <C-g>A <Plug>(CmdlineSpecialAddSuffix)
    cmap <C-g>y <Plug>(CmdlineSpecialYankCommandLine)
    cmap <C-r><C-g> <Plug>(CmdlineSpecialInsertSelection)
    cmap <C-r><C-l> <Plug>(CmdlineSpecialInsertLine)
    cmap <C-r><C-s> <Plug>(CmdlineSpecialInsertChar)
    cmap <C-r><C-v> <Plug>(CmdlineSpecialInsertRegisterForLiteralSearch)
    cmap # <Plug>(CmdlineSpecialLastChangeRange)
    nmap <A-/> <Plug>(CmdlineSpecialToggleSearchMode)
    cmap <A-/> <Plug>(CmdlineSpecialToggleSearchMode)
    nmap <A-?> <Plug>(CmdlineSpecialToggleWholeWord)
    cmap <A-?> <Plug>(CmdlineSpecialToggleWholeWord)
<
==============================================================================
INTEGRATION				     *CmdlineSpecialEdits-integration*

==============================================================================
LIMITATIONS				     *CmdlineSpecialEdits-limitations*

KNOWN PROBLEMS				  *CmdlineSpecialEdits-known-problems*

TODO						    *CmdlineSpecialEdits-todo*

IDEAS						   *CmdlineSpecialEdits-ideas*

==============================================================================
HISTORY						 *CmdlineSpecialEdits-history*

GOAL
First published version.

0.01	13-Jun-2012
Started development.

==============================================================================
Copyright: (C) 2012-2017 Ingo Karkat
The VIM LICENSE applies to this plugin; see |copyright|.

Maintainer:	Ingo Karkat <ingo@karkat.de>
==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
